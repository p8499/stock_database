CREATE OR REPLACE FUNCTION FS12_BEFORE()
  RETURNS TRIGGER AS $$
  DECLARE
    moi NUMERIC;
    mnpe NUMERIC;
    mocn NUMERIC;
  BEGIN
    --FS12.FIOIY 年化营业收入
    SELECT PERCENTILE_DISC(0.5) WITHIN GROUP (ORDER BY t1.FIOI / t0.FIOI) INTO moi FROM(
      SELECT FISTID, FIYEAR, FIPERIOD, FIOI FROM FS12 WHERE FISTID = NEW.FISTID AND FIYEAR < NEW.FIYEAR AND FIPERIOD = NEW.FIPERIOD AND FISTATUS = 'A'
    ) t0 LEFT JOIN FS12 t1 ON t1.FISTID = t0.FISTID AND t1.FIYEAR = t0.FIYEAR AND t1.FIPERIOD = 4 AND FISTATUS = 'A'
    WHERE t0.FIOI IS NOT NULL AND t1.FIOI IS NOT NULL AND t0.FIOI > 0 AND t1.FIOI > 0;
    NEW.FIOIY := moi * NEW.FIOI;
    --FS12.FINPEY 年化净利润(不含少数股东损益)
    SELECT PERCENTILE_DISC(0.5) WITHIN GROUP (ORDER BY t1.FINPE / t0.FINPE) INTO mnpe FROM(
      SELECT FISTID, FIYEAR, FIPERIOD, FINPE FROM FS12 WHERE FISTID = NEW.FISTID AND FIYEAR < NEW.FIYEAR AND FIPERIOD = NEW.FIPERIOD AND FISTATUS = 'A'
    ) t0 LEFT JOIN FS12 t1 ON t1.FISTID = t0.FISTID AND t1.FIYEAR = t0.FIYEAR AND t1.FIPERIOD = 4 AND FISTATUS = 'A'
    WHERE t0.FINPE IS NOT NULL AND t1.FINPE IS NOT NULL AND t0.FINPE > 0 AND t1.FINPE > 0;
    NEW.FINPEY := mnpe * NEW.FINPE;
    --FS12.FIOCN 年化经营活动产生的现金流量净额
    SELECT PERCENTILE_DISC(0.5) WITHIN GROUP (ORDER BY t1.FIOCN / t0.FIOCN) INTO mocn FROM(
      SELECT FISTID, FIYEAR, FIPERIOD, FIOCN FROM FS12 WHERE FISTID = NEW.FISTID AND FIYEAR < NEW.FIYEAR AND FIPERIOD = NEW.FIPERIOD AND FISTATUS = 'A'
    ) t0 LEFT JOIN FS12 t1 ON t1.FISTID = t0.FISTID AND t1.FIYEAR = t0.FIYEAR AND t1.FIPERIOD = 4 AND FISTATUS = 'A'
    WHERE t0.FIOCN IS NOT NULL AND t1.FIOCN IS NOT NULL AND t0.FIOCN > 0 AND t1.FIOCN > 0;
    NEW.FIOCNY := mocn * NEW.FIOCN;
    --返回
    RETURN NEW;
  END;
$$
LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION FS12_AFTER()
  RETURNS TRIGGER AS $$
  DECLARE
    next_found INTEGER;
    next_publish DATE;
    update_sql TEXT;
  BEGIN
    --下一张财报
    SELECT FIPUBLISH INTO next_publish FROM FS12 t0 WHERE t0.FISTID = NEW.FISTID AND (t0.FIYEAR > NEW.FIYEAR OR t0.FIYEAR = NEW.FIYEAR AND t0.FIPERIOD > NEW.FIPERIOD)
      AND NOT EXISTS (SELECT 1 FROM FS12 t1 WHERE t1.FISTID = t0.FISTID AND (t1.FIYEAR > NEW.FIYEAR OR t1.FIYEAR = NEW.FIYEAR AND t1.FIPERIOD > NEW.FIPERIOD)
      AND (t1.FIYEAR > t0.FIYEAR OR t1.FIYEAR = t0.FIYEAR AND t1.FIPERIOD > t0.FIPERIOD));
    --找到受影响的日线
    GET DIAGNOSTICS next_found := ROW_COUNT;
    update_sql := format('UPDATE FM11 SET'
	  || ' D1FINA = ' || COALESCE(CAST(NEW.FINA AS TEXT), 'NULL') || ','
	  || ' D1FIOIY = ' || COALESCE(CAST(NEW.FIOIY AS TEXT), 'NULL') || ','
	  || ' D1FINPEY = ' || COALESCE(CAST(NEW.FINPEY AS TEXT), 'NULL') || ','
	  || ' D1FIOCNY = ' || COALESCE(CAST(NEW.FIOCNY AS TEXT), 'NULL') || ','
	  || ' D1FINAPS = ' || COALESCE(CAST(NEW.FINA AS TEXT) || ' / D1TOTALSHARE', 'NULL') || ','
	  || ' D1FIOIYPS = ' || COALESCE(CAST(NEW.FIOIY AS TEXT) || ' / D1TOTALSHARE', 'NULL') || ','
	  || ' D1FINPEYPS = ' || COALESCE(CAST(NEW.FINPEY AS TEXT) || ' / D1TOTALSHARE', 'NULL') || ','
	  || ' D1FIOCNYPS = ' || COALESCE(CAST(NEW.FIOCNY AS TEXT) || ' / D1TOTALSHARE', 'NULL') || ','
	  || ' D1PB = ' || COALESCE(CASE WHEN NEW.FINA = 0 THEN 'NULL' ELSE 'D1CLOSE / ' || CAST(NEW.FINA AS TEXT) || ' * D1TOTALSHARE' END, 'NULL') || ','
	  || ' D1PS = ' || COALESCE(CASE WHEN NEW.FIOIY = 0 THEN 'NULL' ELSE 'D1CLOSE / ' || CAST(NEW.FIOIY AS TEXT) || ' * D1TOTALSHARE' END, 'NULL') || ','
	  || ' D1PE = ' || COALESCE(CASE WHEN NEW.FINPEY = 0 THEN 'NULL' ELSE 'D1CLOSE / ' || CAST(NEW.FINPEY AS TEXT) || ' * D1TOTALSHARE' END, 'NULL') || ','
	  || ' D1PCF = ' || COALESCE(CASE WHEN NEW.FIOCNY = 0 THEN 'NULL' ELSE 'D1CLOSE / ' || CAST(NEW.FIOCNY AS TEXT) || ' * D1TOTALSHARE' END, 'NULL'));
    IF next_found = 1 THEN
      update_sql := update_sql || format(' WHERE D1STID = %L AND D1DATE >= %L AND D1DATE < %L;', NEW.FISTID, NEW.FIPUBLISH, next_publish);
    ELSE
      update_sql := update_sql || format(' WHERE D1STID = %L AND D1DATE >= %L;', NEW.FISTID, NEW.FIPUBLISH);
    END IF;
    EXECUTE update_sql;
    --返回
    RETURN NEW;
  END;
$$
LANGUAGE plpgsql;

DROP TRIGGER IF EXISTS FS12_BEFORE_INSERT ON FS12;
CREATE TRIGGER FS12_BEFORE_INSERT BEFORE INSERT ON FS12 FOR EACH ROW EXECUTE PROCEDURE FS12_BEFORE();

DROP TRIGGER IF EXISTS FS12_BEFORE_UPDATE ON FS12;
CREATE TRIGGER FS12_BEFORE_UPDATE BEFORE UPDATE ON FS12 FOR EACH ROW WHEN(
  NEW.FISTATUS IS DISTINCT FROM OLD.FISTATUS OR
  NEW.FIPUBLISH IS DISTINCT FROM OLD.FIPUBLISH OR
  NEW.FINA IS DISTINCT FROM OLD.FINA OR
  NEW.FIOI IS DISTINCT FROM OLD.FIOI OR
  NEW.FINPE IS DISTINCT FROM OLD.FINPE OR
  NEW.FIOCN IS DISTINCT FROM OLD.FIOCN)
EXECUTE PROCEDURE FS12_BEFORE();

DROP TRIGGER IF EXISTS FS12_AFTER_INSERT ON FS12;
CREATE TRIGGER FS12_AFTER_INSERT AFTER INSERT ON FS12 FOR EACH ROW EXECUTE PROCEDURE FS12_AFTER();

DROP TRIGGER IF EXISTS FS12_AFTER_UPDATE ON FS12;
CREATE TRIGGER FS12_AFTER_UPDATE AFTER UPDATE ON FS12 FOR EACH ROW WHEN(
  NEW.FISTATUS IS DISTINCT FROM OLD.FISTATUS OR
  NEW.FIPUBLISH IS DISTINCT FROM OLD.FIPUBLISH OR
  NEW.FINA IS DISTINCT FROM OLD.FINA OR
  NEW.FIOI IS DISTINCT FROM OLD.FIOI OR
  NEW.FINPE IS DISTINCT FROM OLD.FINPE OR
  NEW.FIOCN IS DISTINCT FROM OLD.FIOCN)
EXECUTE PROCEDURE FS12_AFTER();
